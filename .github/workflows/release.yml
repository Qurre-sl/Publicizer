name: Release Pipeline

on:
  push:
    branches: [main]
    tags-ignore: ['**']

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    if: "startsWith(github.event.head_commit.message, 'release: ')"
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: extract-version
        run: |
          VERSION=$(echo "${{ github.event.head_commit.message }}" | sed -n 's/release: \(.*\)/\1/p')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update AssemblyInfo.cs
        run: |
          sed -i "s/AssemblyVersion(\"[0-9.]*\")/AssemblyVersion(\"${{ steps.extract-version.outputs.version }}\")/g" AssemblyInfo.cs
          sed -i "s/AssemblyFileVersion(\"[0-9.]*\")/AssemblyFileVersion(\"${{ steps.extract-version.outputs.version }}\")/g" AssemblyInfo.cs

      - name: Commit version update
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add AssemblyInfo.cs
          git commit -m "ignore: update version to ${{ steps.extract-version.outputs.version }}"

      - name: Create tag
        run: git tag ${{ steps.extract-version.outputs.version }}

      - name: Push changes
        run: |
          git push origin main
          git push origin ${{ steps.extract-version.outputs.version }}

  create-changelog:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      # 1. Получаем код репозитория
      # fetch-depth: 0 нужен, чтобы получить всю историю и теги для Action'а
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # 2. Задаем права на запуск скрипта
      - name: Make changelog script executable
        run: chmod +x ./.github/changelog-generator.sh

      # 3. Генерируем Changelog
      - name: Build Changelog
        id: changelog_builder
        run: ./.github/changelog-generator.sh
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}

      # 4. Загружаем сгенерированные заметки как артефакт
      - name: Upload Release Notes Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md # Путь к файлу, указанный в outputFile


      # 3. Загружаем сгенерированные заметки как артефакт
      - name: Upload Release Notes Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md # Путь к файлу, указанный в outputFile

  build:
    needs: prepare-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            runtime: linux-x64
          - os: windows-latest
            runtime: win-x64
          - os: macos-latest
            runtime: osx-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
         
      - name: Publish
        run: |
          dotnet publish --configuration Release -r ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -p:DebugType=None -p:DebugSymbols=false -o ./publish/${{ matrix.runtime }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.runtime }}
          path: ./publish/${{ matrix.runtime }}/*
          
  create-release:
    needs: [prepare-release, build, create-changelog]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Download Release Notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          name: Release ${{ needs.prepare-release.outputs.version }}
          body_path: release-notes.md
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}